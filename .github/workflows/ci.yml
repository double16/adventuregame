name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Cache gradle dependencies
        uses: actions/cache@v3
        env:
          cache-name: cache-gradle-depedencies
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}-${{
            hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{
            hashFiles('**/buildSrc/**/*.kt') }}
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew bootJar
      # Using cache instead of artifacts to avoid reaching the artifacts free quota size
      - name: Cache jar file for next job
        uses: actions/cache@v2
        with:
          path: build/libs
          key: bootapp-jar-${{ github.sha }}

  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Cache gradle dependencies
        uses: actions/cache@v3
        env:
          cache-name: cache-gradle-depedencies
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}-${{
            hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{
            hashFiles('**/buildSrc/**/*.kt') }}
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Execute all tests
        run: ./gradlew cloverGenerateReport --stacktrace
      - name: Archive check reports
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: check-reports
          path: build/reports


  sast:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Cache gradle dependencies
        uses: actions/cache@v3
        env:
          cache-name: cache-gradle-depedencies
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}-${{
            hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{
            hashFiles('**/buildSrc/**/*.kt') }}
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: codenarc
        run: ./gradlew codenarcMain --stacktrace --no-daemon
      - name: Archive SAST reports
        uses: actions/upload-artifact@v3
        with:
          name: sast-reports
          path: build/reports

  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Cache gradle dependencies
        uses: actions/cache@v3
        env:
          cache-name: cache-gradle-depedencies
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}-${{
            hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{
            hashFiles('**/buildSrc/**/*.kt') }}
      - name: Cache dependency check
        uses: actions/cache@v3
        with:
          path: ~/.gradle/dependency-check-data
          key: ${{ runner.os }}-gradle-dependency-check-data-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-dependency-check-data-
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Open Source Vuln
        run: ./gradlew dependencyCheckAggregate --stacktrace --no-daemon

#  dast:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-java@v3
#        with:
#          java-version: '11'
#          distribution: 'temurin'
#      - name: Cache gradle dependencies
#        uses: actions/cache@v2
#        env:
#          cache-name: cache-gradle-depedencies
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}-${{
#            hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{
#            hashFiles('**/buildSrc/**/*.kt') }}
#      - uses: actions/cache@v3
#        with:
#          path: ~/.gradle/zap
#          key: ${{ runner.os }}-gradle-zap-${{ hashFiles('**/*.gradle') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-zap-

  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=true

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Image
        run: |
          ./gradlew "-PimageName=${{ steps.meta.outputs.tags }}" "-PimageTags=${{ steps.meta.outputs.tags }}" bootBuildImage

      - name: Push Docker image
        run: |
          while read TAG; do
            docker push ${TAG}
          done << EOF
          ${{ steps.meta.outputs.tags }}
          EOF
